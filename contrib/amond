#!/usr/bin/env python
### BEGIN INIT INFO
# Provides:          amond
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the Amon system info collector
# Description:       Amon daemon that collects system and process information.
### END INIT INFO

import sys, time
import logging

try:
	import amonlite
except:
	print 'Amon Lite is not installed'
	sys.exit()

from amonlite.system.daemon import Daemon
from amonlite.core import settings
from amonlite.system.runner import runner
from amonlite.backends.mongodb import backend

PIDFILE = '/var/run/amond.pid'
# Keep all log files in one place
LOGFILE = '/usr/local/amonlite/amond.log'

# Configure logging
logging.basicConfig(filename=LOGFILE,level=logging.DEBUG)
log = logging.getLogger('amond')

class AmonDaemon(Daemon):
	
	# Add an empty dictionary on start/end to avoid chart bugs
	def empty(self):
		system_info_empty = runner.empty()
		try:
			backend.store_entries(system_info_empty)
		except Exception, e:
			log.exception('Saving empty system info failed')

	# Executed on stop and restart
	def __del__(self):
		self.empty()
		
	def __init__(self, pidfile):
		super(AmonDaemon, self).__init__(pidfile)
		self.empty()
	
	def run(self):
		
		while True:
			system_info = runner.system()
			try:			
				backend.store_entries(system_info)
			except Exception, e:			
				log.exception('Saving system info failed')
			
			process_info = runner.processes()

			try:
				backend.store_entries(process_info)
			except Exception, e:			
				log.exception('Saving process info failed')

			# Checks the system every 60 seconds
			time.sleep(settings.SYSTEM_CHECK_PERIOD)

if __name__ == "__main__":

	daemon = AmonDaemon(PIDFILE)
	
	if len(sys.argv) == 2:
		if 'start' == sys.argv[1]:
			try:
				daemon.start()
			except Exception, e:
				log.exception("Amond cant be started")
		elif 'stop' == sys.argv[1]:
			print "Stopping Amond ..."
			daemon.stop()
		elif 'restart' == sys.argv[1]:
			print "Restaring Amond ..."
			daemon.restart()
		elif 'status' == sys.argv[1]:
			try:
				pf = file(PIDFILE,'r')
				pid = int(pf.read().strip())
				pf.close()
			except IOError:
				pid = None
			except SystemExit:
				pid = None

			if pid:
				print 'Amond is running as pid %s' % pid
			else:
				print 'Amond is not running.'
		
		else:
			print "Unknown command"
			sys.exit(2)
			sys.exit(0)
	else:
		print "usage: %s start|stop|restart|status" % sys.argv[0]
		sys.exit(2)

