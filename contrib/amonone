#!/usr/bin/python
### BEGIN INIT INFO
# Provides:          amonone
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts the AmonOne web interface
### END INIT INFO
import sys
import logging

try:
	import amonone
except:
	print 'Amon is not installed'
	sys.exit()

from amonone.web.libs.daemon import Daemon
from amonone.web.server import application
from amonone.core import settings
import tornado.ioloop
import tornado.httpserver

logging.basicConfig(filename=settings.LOGFILE,level=logging.ERROR)
PIDFILE = '/var/run/amonone.pid'
logger = logging.getLogger('amonone')

class AmonOneDaemon(Daemon):

	def run(self):
		server = tornado.httpserver.HTTPServer(application)
		server.bind(int(settings.WEB_APP['port']))
		server.start(0)
		tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":

	daemon = AmonOneDaemon(PIDFILE)

	if len(sys.argv) == 2:
		if 'start' == sys.argv[1]:
			try:
				daemon.start()
			except:
				pass
		elif 'stop' == sys.argv[1]:
			print "Stopping AmonOne ..."
			daemon.stop()
		elif 'restart' == sys.argv[1]:
			print "Restaring AmonOne ..."
			daemon.restart()
		elif 'status' == sys.argv[1]:
			try:
				pf = file(PIDFILE,'r')
				pid = int(pf.read().strip())
				pf.close()
			except IOError:
				pid = None
			except SystemExit:
				pid = None

			if pid:
				print 'AmonOne {0} running as pid {1}'.format(amonone.__version__, pid)
				print 'You can check it out at {0}:{1}'.format(settings.WEB_APP['host'],
						settings.WEB_APP['port'])
			else:
				print 'AmonOne is not running.'

		else:
			print "Unknown command"
			sys.exit(2)
			sys.exit(0)
	else:
		print "usage: %s start|stop|restart|status" % sys.argv[0]
		sys.exit(2)

